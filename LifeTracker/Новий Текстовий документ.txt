# -*- coding: utf-8 -*-
import re
from datetime import datetime, timedelta, date
from PyQt5 import QtWidgets, QtCore

DATE_RE = re.compile(r"(\d{4})[-/.](\d{1,2})[-/.](\d{1,2})")
TIME_RE = re.compile(r"(\d{1,2}):(\d{2})")
AMOUNT_RE = re.compile(r"([-+]?\d+(?:[.,]\d+)?)\s*(?:‚Ç¨|eur|uah|–≥—Ä–Ω|‚Ç¥)?", re.I)

MONTHS_UA = {
    "—Å—ñ—á":1,"—Å—ñ—á–Ω—è":1,"–ª—ét":2,"–ª—é—Ç":2,"–ª—é—Ç–æ–≥–æ":2,"–±–µ—Ä":3,"–±–µ—Ä–µ–∑–Ω—è":3,"–∫–≤—ñ":4,"–∫–≤—ñ—Ç–Ω—è":4,"—Ç—Ä–∞":5,"—Ç—Ä–∞–≤–Ω—è":5,
    "—á–µ—Ä":6,"—á–µ—Ä–≤–Ω—è":6,"–ª–∏–ø":7,"–ª–∏–ø–Ω—è":7,"—Å–µ—Ä":8,"—Å–µ—Ä–ø–Ω—è":8,"–≤–µ—Ä":9,"–≤–µ—Ä–µ—Å–Ω—è":9,"–∂–æ–≤":10,"–∂–æ–≤—Ç–Ω—è":10,"–ª–∏—Å":11,"–ª–∏—Å—Ç–æ–ø–∞–¥–∞":11,"–≥—Ä—É":12,"–≥—Ä—É–¥–Ω—è":12
}
MONTHS_EN = {m.lower():i+1 for i,m in enumerate(
    ["january","february","march","april","may","june","july","august","september","october","november","december"])}

def parse_rel_date(text: str) -> date:
    t = text.lower()
    today = date.today()
    if "—Å—å–æ–≥–æ–¥–Ω—ñ" in t or "today" in t: return today
    if "–≤—á–æ—Ä–∞" in t or "yesterday" in t: return today - timedelta(days=1)
    if "–∑–∞–≤—Ç—Ä–∞" in t or "tomorrow" in t: return today + timedelta(days=1)
    m = DATE_RE.search(text)
    if m:
        y, mo, d = map(int, m.groups())
        return date(y, mo, d)
    # "12 –±–µ—Ä–µ–∑–Ω—è 2025", "5 april 2026"
    tokens = re.findall(r"[A-Za-z–ê-–©–¨–Æ–Ø–Ü–á–Ñ–∞-—â—å—é—è—ñ—ó—î]+|\d+", text)
    for i in range(len(tokens)-2):
        if tokens[i].isdigit() and tokens[i+2].isdigit():
            day = int(tokens[i])
            mon = tokens[i+1].lower()
            year = int(tokens[i+2])
            if mon in MONTHS_UA: return date(year, MONTHS_UA[mon], day)
            if mon in MONTHS_EN: return date(year, MONTHS_EN[mon], day)
    return today

def parse_time(text: str) -> str:
    m = TIME_RE.search(text)
    if not m: return "09:00"
    h, mi = map(int, m.groups())
    return f"{h:02d}:{mi:02d}"

class AIAssistantTab(QtWidgets.QWidget):
    """
    Smart command parser:
      - "–≤–∏—Ç—Ä–∞—Ç–∞ 120 –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç —Å—å–æ–≥–æ–¥–Ω—ñ" -> expense
      - "–ø–æ–¥—ñ—è –ó—É—Å—Ç—Ä—ñ—á 2025-10-12 14:30" -> event
      - "–∑–∞–¥–∞—á–∞ –ó–¥–∞—Ç–∏ –∫—É—Ä—Å–æ–≤—É –∑–∞–≤—Ç—Ä–∞ high" -> task
    """
    def __init__(self, main_module, main_window):
        super().__init__()
        self.main = main_module
        self.win = main_window

        v = QtWidgets.QVBoxLayout(self)
        h = QtWidgets.QHBoxLayout()
        h.addWidget(QtWidgets.QLabel("ü§ñ Smart command:"))
        self.inp = QtWidgets.QLineEdit()
        self.inp.setPlaceholderText("–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –∑–∞–¥–∞—á–∞ –ó–¥–∞—Ç–∏ –∫—É—Ä—Å–æ–≤—É –∑–∞–≤—Ç—Ä–∞ high  |  –≤–∏—Ç—Ä–∞—Ç–∞ 120 —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç —Å—å–æ–≥–æ–¥–Ω—ñ  |  –ø–æ–¥—ñ—è –ö–æ–ª–æ–∫–≤—ñ—É–º 2025-10-01 09:00")
        h.addWidget(self.inp, 1)
        btn = QtWidgets.QPushButton("–ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏"); btn.setObjectName("Primary")
        btn.clicked.connect(self.run)
        h.addWidget(btn)
        v.addLayout(h)

        self.out = QtWidgets.QPlainTextEdit(); self.out.setReadOnly(True)
        v.addWidget(self.out, 1)

    def run(self):
        text = self.inp.text().strip()
        if not text:
            return
        t = text.lower()

        try:
            if t.startswith(("–≤–∏—Ç—Ä–∞—Ç–∞","expense","–≤–∏—Ç—Ä–∞—Ç–∏")):
                self._add_expense(text)
            elif t.startswith(("–ø–æ–¥—ñ—è","event","–∑—É—Å—Ç—Ä—ñ—á")):
                self._add_event(text)
            elif t.startswith(("–∑–∞–¥–∞—á–∞","task","todo")):
                self._add_task(text)
            else:
                # heuristic: contains currency/number => expense; contains time => event; else task
                if AMOUNT_RE.search(text):
                    self._add_expense(text)
                elif TIME_RE.search(text) or any(k in t for k in ["meet","–∑—É—Å—Ç—Ä","–ª–µ–∫—Ü","–µ–∫–∑–∞–º","exam","event","–ø–æ–¥—ñ"]):
                    self._add_event(text)
                else:
                    self._add_task(text)
        except Exception as e:
            self.out.appendPlainText(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

    def _add_expense(self, text: str):
        m = AMOUNT_RE.search(text)
        if not m:
            raise ValueError("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Å—É–º—É")
        amount = float(m.group(1).replace(",", "."))
        dt = parse_rel_date(text).isoformat()
        # category = words after amount
        tail = text[m.end():].strip()
        cat = tail.split()[0] if tail else "Misc"
        self.main.db.add_expense(dt, cat, amount, note="")
        self.out.appendPlainText(f"‚úÖ –î–æ–¥–∞–Ω–æ –≤–∏—Ç—Ä–∞—Ç—É: {amount} {cat} –Ω–∞ {dt}")
        try:
            self.win.page_expenses.reload_table()
        except Exception:
            pass

    def _add_event(self, text: str):
        # title is text after keyword up to date/time
        dt_ = parse_rel_date(text).isoformat()
        tm_ = parse_time(text)
        start_ts = f"{dt_} {tm_}"
        # crude title extraction
        title = re.sub(r"^(–ø–æ–¥—ñ—è|event|–∑—É—Å—Ç—Ä—ñ—á)\s*", "", text.strip(), flags=re.I)
        title = DATE_RE.sub("", title)
        title = TIME_RE.sub("", title).strip() or "New Event"
        self.main.db.add_event(title, start_ts)
        self.out.appendPlainText(f"‚úÖ –ü–æ–¥—ñ—è '{title}' –Ω–∞ {start_ts}")
        try:
            self.win.page_calendar.reload_list()
        except Exception:
            pass

    def _add_task(self, text: str):
        prio = "Low"
        if "high" in text.lower() or "–≤–∏—Å" in text.lower() or "—Ç–µ—Ä–º—ñ–Ω" in text.lower(): prio = "High"
        elif "med" in text.lower() or "—Å–µ—Ä–µ–¥" in text.lower(): prio = "Medium"
        due = parse_rel_date(text).isoformat()
        title = re.sub(r"^(–∑–∞–¥–∞—á–∞|task|todo)\s*", "", text.strip(), flags=re.I)
        title = DATE_RE.sub("", title)
        title = title.replace("–∑–∞–≤—Ç—Ä–∞","").replace("—Å—å–æ–≥–æ–¥–Ω—ñ","").strip() or "New Task"
        self.main.db.add_task(title, due, prio)
        self.out.appendPlainText(f"‚úÖ –ó–∞–¥–∞—á–∞ '{title}', –¥–µ–¥–ª–∞–π–Ω {due}, –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç {prio}")
        try:
            self.win.page_tasks.reload()
        except Exception:
            pass
